(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('resize-observer'), require('@angular/material/checkbox'), require('@angular/material/input'), require('@angular/material/select'), require('@angular/material/tooltip'), require('@angular/material/button'), require('@angular/material/icon'), require('@angular/common'), require('@angular/material/slider'), require('@angular/forms'), require('@angular/material/form-field')) :
    typeof define === 'function' && define.amd ? define('ngp-image-picker', ['exports', '@angular/core', 'resize-observer', '@angular/material/checkbox', '@angular/material/input', '@angular/material/select', '@angular/material/tooltip', '@angular/material/button', '@angular/material/icon', '@angular/common', '@angular/material/slider', '@angular/forms', '@angular/material/form-field'], factory) :
    (global = global || self, factory(global['ngp-image-picker'] = {}, global.ng.core, global.resizeObserver, global.ng.material.checkbox, global.ng.material.input, global.ng.material.select, global.ng.material.tooltip, global.ng.material.button, global.ng.material.icon, global.ng.common, global.ng.material.slider, global.ng.forms, global.ng.material.formField));
}(this, (function (exports, core, resizeObserver, checkbox, input, select, tooltip, button, icon, common, slider, forms, formField) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var NgpImagePickerComponent = /** @class */ (function () {
        function NgpImagePickerComponent() {
            this.config = {
                height: '240px',
                width: '320px',
                borderRadius: '16px',
                compressInitial: true,
                language: 'en',
                hideDeleteBtn: false,
                hideDownloadBtn: false,
                hideEditBtn: false,
                hideAddBtn: false,
            };
            this.observer = null;
            this.showCrop = false;
            this.loadImage = false;
            this.uuidFilePicker = Date.now().toString(20);
            this.showEditPanel = false;
            this.quality = 92;
            this.format = 'jpeg';
            this.allFormats = ['webp', 'jpeg', 'png'];
            this.maxHeight = 2000;
            this.maxWidth = 2000;
            this.cropHeight = 150;
            this.cropWidth = 150;
            this.maintainAspectRatio = true;
            this.imageName = 'donload';
            ///////////////////////////////////////////////////////
            this.labelEn = {
                'Upload a image': 'Upload a image',
                'You must edit the image in order to resize it': 'You must edit the image in order to resize it',
                'too large': 'too large',
                'Open the editor panel': 'Open the editor panel',
                'Download the image': 'Download the image',
                'Control Panel': 'Control Panel',
                Quality: 'Quality',
                'Max dimensions': 'Max dimensions',
                'aspect-ratio': 'aspect-ratio',
                'max-width(px)': 'max-width(px)',
                'max-height(px)': 'max-height(px)',
                Format: 'Format',
                Crop: 'Crop',
                'width(px)': 'width(px)',
                'height(px)': 'height(px)',
                'Remove': 'Remove',
            };
            this.labelEs = {
                'Upload a image': 'Suba una imagen',
                'You must edit the image in order to resize it': 'Debe editar la imagen para disminuir su tamaño',
                'too large': 'muy grande',
                'Open the editor panel': 'Abra el panel de edición',
                'Download the image': 'Descarge la imagen',
                'Control Panel': 'Panel de control',
                'Remove': 'Quitar',
                Quality: 'Calidad',
                'Max dimensions': 'Dimensiones',
                'aspect-ratio': 'relación-aspecto',
                'max-width(px)': 'max. ancho',
                'max-height(px)': 'max. alto',
                Format: 'Formato',
                Crop: 'Recortar',
                'width(px)': 'ancho(px)',
                'height(px)': 'altura(px)',
            };
            this.labels = this.labelEn;
            this.arrayCopiedImages = [];
            this.$imageChanged = new core.EventEmitter();
            this.$imageOriginal = new core.EventEmitter();
        }
        Object.defineProperty(NgpImagePickerComponent.prototype, "_imageSrc", {
            set: function (value) {
                var _this = this;
                if (value != undefined) {
                    this.parseToBase64(value).then(function (dataUri) {
                        _this.imageSrc = dataUri;
                        _this.arrayCopiedImages = [];
                        _this.arrayCopiedImages.push(_this.imageSrc);
                        _this.originImageSrc = value;
                        _this.lastOriginSrc = value;
                        _this.$imageOriginal.next(_this.originImageSrc);
                        _this.loadImage = true;
                    });
                }
                else {
                    this.imageSrc = null;
                    this.originImageSrc = null;
                    this.loadImage = false;
                    this.arrayCopiedImages = [];
                    this.lastOriginSrc = null;
                    this.$imageOriginal.next(null);
                    this.format = 'jpeg';
                    this.maxHeight = 2000;
                    this.maxWidth = 2000;
                    this.cropHeight = 150;
                    this.cropWidth = 150;
                    this.maintainAspectRatio = true;
                    this.showEditPanel = false;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgpImagePickerComponent.prototype, "_config", {
            set: function (value) {
                this.processConfig(value);
            },
            enumerable: false,
            configurable: true
        });
        NgpImagePickerComponent.prototype.ngOnInit = function () { };
        NgpImagePickerComponent.prototype.onUpload = function (event) {
            event.preventDefault();
            // const element: HTMLElement = document.getElementById('filePicker-' + this.uuidFilePicker) as HTMLElement;
            this.imagePicker.nativeElement.click();
            // element.click();
        };
        NgpImagePickerComponent.prototype.handleFileSelect = function (evt) {
            var _a;
            var files = (_a = evt.target) === null || _a === void 0 ? void 0 : _a.files;
            if (files) {
                var file = files[0];
                this.imageName = file.name.split('.')[0];
                // console.log('NgpImagePickerComponent -> handleFileSelect -> file.name', file.name);
                this.fileType = file.type;
                this.urlImage = "data:" + file.type + ";base64,";
                if (files && file) {
                    var reader = new FileReader();
                    reader.onload = this.handleReaderLoaded.bind(this);
                    reader.readAsBinaryString(file);
                }
            }
        };
        NgpImagePickerComponent.prototype.handleReaderLoaded = function (readerEvt) {
            return __awaiter(this, void 0, void 0, function () {
                var binaryString, base64textString, input, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            binaryString = readerEvt.target.result;
                            base64textString = btoa(binaryString);
                            this.originImageSrc = this.urlImage + base64textString;
                            this.lastOriginSrc = this.urlImage + base64textString;
                            if (!this.config.compressInitial) return [3 /*break*/, 2];
                            this.quality = 92;
                            input = {
                                dataType: this.format,
                                quality: 0.92,
                                maintainRatio: true,
                            };
                            _b = this;
                            return [4 /*yield*/, this.resizedataURL(this.urlImage + base64textString, input)];
                        case 1:
                            _b.imageSrc = _c.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            this.imageSrc = this.urlImage + base64textString;
                            this.arrayCopiedImages = [];
                            this.arrayCopiedImages.push({
                                lastImage: this.imageSrc,
                                width: this.maxWidth,
                                height: this.maxHeight,
                                quality: this.quality,
                            });
                            this.$imageOriginal.next(this.imageSrc);
                            _c.label = 3;
                        case 3:
                            this.$imageChanged.next(this.imageSrc);
                            this.loadImage = true;
                            return [2 /*return*/];
                    }
                });
            });
        };
        NgpImagePickerComponent.prototype.onOpenEditPanel = function () {
            this.showEditPanel = true;
        };
        NgpImagePickerComponent.prototype.onCloseEditPanel = function () {
            if (this.observer instanceof resizeObserver.ResizeObserver) {
                this.observer.unobserve(document.getElementById('image-croper'));
                this.observer.unobserve(document.getElementById('image-full'));
            }
            this.showCrop = false;
            this.showEditPanel = false;
        };
        NgpImagePickerComponent.prototype.parseToBase64 = function (imageUrl) {
            var _this = this;
            var types = imageUrl.split('.');
            var type = types[types.length - 1];
            // console.log('ImagePickerComponent -> ngOnInit -> type', type);
            if (type && (type == 'png' || type == 'jpeg' || type == 'webp')) {
                type = type;
            }
            else {
                type = 'jpeg';
            }
            this.format = type;
            return new Promise(function (resolve, reject) {
                var img = document.createElement('img');
                img.crossOrigin = 'Anonymous';
                img.src = imageUrl;
                _this.maxHeight = img.height;
                _this.maxWidth = img.width;
                img.onload = function () {
                    var canvas = document.createElement('canvas');
                    var ctx = canvas.getContext('2d');
                    var ratio = 1.0;
                    canvas.width = img.width * ratio;
                    canvas.height = img.height * ratio;
                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                    var dataURI = canvas.toDataURL("image/" + type, 0.92);
                    return resolve({
                        dataUri: dataURI,
                        width: canvas.width,
                        height: canvas.height,
                    });
                };
            }).then(function (data) {
                // console.log('ImagePickerComponent -> ngOnInit -> data', data);
                _this.maxHeight = data.height;
                _this.maxWidth = data.width;
                return data.dataUri;
            });
        };
        NgpImagePickerComponent.prototype.processConfig = function (value) {
            if (value && value.constructor == Object) {
                this.config = Object.assign(Object.assign({}, this.config), value);
                if (value.language != undefined) {
                    if (value.language == 'en') {
                        this.labels = Object.assign({}, this.labelEn);
                    }
                    if (value.language == 'es') {
                        this.labels = Object.assign({}, this.labelEs);
                    }
                }
            }
        };
        /////////////////////////////////////////////////
        NgpImagePickerComponent.prototype.resizedataURL = function (datas, input) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                return __awaiter(this, void 0, void 0, function () {
                    var img, quality, maintainRatio;
                    return __generator(this, function (_b) {
                        img = document.createElement('img');
                        img.src = datas + '';
                        img.crossOrigin = 'Anonymous';
                        quality = input.quality ? input.quality : 1.0;
                        maintainRatio = input.maintainRatio != undefined ? input.maintainRatio : true;
                        img.onload = function () {
                            var canvas = document.createElement('canvas');
                            var ctx = canvas.getContext('2d');
                            var ratio = img.width / img.height;
                            var width = input.width ? input.width : img.width;
                            var height = input.height ? input.height : img.height;
                            if (maintainRatio) {
                                if (input.changeHeight) {
                                    canvas.width = height * ratio;
                                    canvas.height = height;
                                }
                                else {
                                    canvas.width = width;
                                    canvas.height = width / ratio;
                                }
                            }
                            else {
                                canvas.width = width;
                                canvas.height = height;
                            }
                            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                            var type = input.dataType ? input.dataType : 'webp';
                            var dataURI = canvas.toDataURL("image/" + type, quality);
                            resolve({
                                dataUri: dataURI,
                                width: canvas.width,
                                height: canvas.height,
                            });
                        };
                        return [2 /*return*/];
                    });
                });
            }).then(function (data) {
                // console.log('ImagePickerComponent -> ngOnInit -> data', data);
                _this.maxHeight = data.height;
                _this.maxWidth = data.width;
                if (_this.arrayCopiedImages.length <= 20) {
                    _this.arrayCopiedImages.push({
                        lastImage: data.dataUri,
                        width: _this.maxWidth,
                        height: _this.maxHeight,
                        quality: _this.quality,
                    });
                }
                return data.dataUri;
            });
        };
        NgpImagePickerComponent.prototype.calculateSize = function () {
            var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
            if (this.imageSrc && base64regex.test(this.imageSrc.split(',')[1])) {
                return Math.ceil(((3 / 4) * this.imageSrc.length) / 1024);
            }
            else {
                return;
            }
        };
        NgpImagePickerComponent.prototype.onChangeQuality = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var qualityItem, input, _b, error_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            qualityItem = this.quality / 100;
                            this.maxHeight = this.maxHeight && +this.maxHeight ? this.maxHeight : 2000;
                            // console.log('ImagePickerComponent -> onChangeQuality -> this.maxHeight', this.maxHeight);
                            this.maxWidth = this.maxWidth && +this.maxWidth ? this.maxWidth : 2000;
                            // console.log('ImagePickerComponent -> onChangeQuality ->  this.maxWidth', this.maxWidth);
                            return [4 /*yield*/, this.wait(250)];
                        case 1:
                            // console.log('ImagePickerComponent -> onChangeQuality ->  this.maxWidth', this.maxWidth);
                            _c.sent();
                            _c.label = 2;
                        case 2:
                            _c.trys.push([2, 4, , 5]);
                            input = {
                                height: this.maxHeight,
                                width: this.maxWidth,
                                dataType: this.format,
                                quality: qualityItem,
                                maintainRatio: this.maintainAspectRatio,
                            };
                            _b = this;
                            return [4 /*yield*/, this.resizedataURL(this.originImageSrc, input)];
                        case 3:
                            _b.imageSrc = _c.sent();
                            this.$imageChanged.next(this.imageSrc);
                            this.loadImage = true;
                            return [3 /*break*/, 5];
                        case 4:
                            error_1 = _c.sent();
                            this.loadImage = true;
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        NgpImagePickerComponent.prototype.onChangeFormat = function (format) {
            return __awaiter(this, void 0, void 0, function () {
                var qualityItem, input, _b, error_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            qualityItem = this.quality / 100;
                            this.maxHeight = this.maxHeight && +this.maxHeight ? this.maxHeight : 2000;
                            this.maxWidth = this.maxWidth && +this.maxWidth ? this.maxWidth : 2000;
                            // console.log('ImagePickerComponent -> onChangeFormat -> this.maintainAspectRatio', this.maintainAspectRatio);
                            return [4 /*yield*/, this.wait(250)];
                        case 1:
                            // console.log('ImagePickerComponent -> onChangeFormat -> this.maintainAspectRatio', this.maintainAspectRatio);
                            _c.sent();
                            _c.label = 2;
                        case 2:
                            _c.trys.push([2, 4, , 5]);
                            input = {
                                height: this.maxHeight,
                                width: this.maxWidth,
                                dataType: this.format,
                                quality: qualityItem,
                                maintainRatio: this.maintainAspectRatio,
                            };
                            _b = this;
                            return [4 /*yield*/, this.resizedataURL(this.originImageSrc, input)];
                        case 3:
                            _b.imageSrc = _c.sent();
                            this.$imageChanged.next(this.imageSrc);
                            this.loadImage = true;
                            return [3 /*break*/, 5];
                        case 4:
                            error_2 = _c.sent();
                            this.loadImage = true;
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        NgpImagePickerComponent.prototype.onChangeSize = function (changeWidth, changeHeight) {
            return __awaiter(this, void 0, void 0, function () {
                var qualityItem, input, _b, error_3;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            qualityItem = this.quality / 100;
                            this.maxHeight = this.maxHeight && +this.maxHeight ? this.maxHeight : 2000;
                            this.maxWidth = this.maxWidth && +this.maxWidth ? this.maxWidth : 2000;
                            return [4 /*yield*/, this.wait(500)];
                        case 1:
                            _c.sent();
                            _c.label = 2;
                        case 2:
                            _c.trys.push([2, 4, , 5]);
                            input = {
                                height: this.maxHeight,
                                width: this.maxWidth,
                                dataType: this.format,
                                quality: qualityItem,
                                maintainRatio: this.maintainAspectRatio,
                                changeHeight: changeHeight,
                                changeWidth: changeWidth,
                            };
                            _b = this;
                            return [4 /*yield*/, this.resizedataURL(this.originImageSrc, input)];
                        case 3:
                            _b.imageSrc = _c.sent();
                            this.$imageChanged.next(this.imageSrc);
                            this.loadImage = true;
                            return [3 /*break*/, 5];
                        case 4:
                            error_3 = _c.sent();
                            this.loadImage = true;
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        NgpImagePickerComponent.prototype.onChangeCrop = function (data) {
            var croper = document.getElementById('image-croper');
            croper.style.width = this.cropWidth + 'px';
            croper.style.height = this.cropHeight + 'px';
        };
        ////////////////////////////////////////////////
        NgpImagePickerComponent.prototype.wait = function (ms) {
            ms = ms ? ms : 1000;
            return new Promise(function (resolve, reject) {
                setTimeout(function () {
                    return resolve(true);
                }, ms);
            });
        };
        NgpImagePickerComponent.prototype.dragElement = function (elemnt) {
            var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
            if (document.getElementById(elemnt.id + '-header')) {
                /* if present, the header is where you move the DIV from:*/
                document.getElementById(elemnt.id + '-header').onmousedown = dragMouseDown;
                document.getElementById(elemnt.id + '-header').ontouchstart = dragMouseDown;
            }
            else {
                /* otherwise, move the DIV from anywhere inside the DIV:*/
                elemnt.onmousedown = dragMouseDown;
                elemnt.ontouchstart = dragMouseDown;
            }
            function dragMouseDown(e) {
                e = e || window.event;
                e.preventDefault();
                // get the mouse cursor position at startup:
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragElement;
                document.ontouchend = closeDragElement;
                // call a function whenever the cursor moves:
                document.onmousemove = elementDrag;
                document.ontouchmove = elementDrag;
            }
            function elementDrag(e) {
                var holderImage = document.getElementById('image-full');
                e = e || window.event;
                e.preventDefault();
                // calculate the new cursor position:
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                var newTop = elemnt.offsetTop - pos2;
                var newLeft = elemnt.offsetLeft - pos1;
                var rectHolder = holderImage.getBoundingClientRect();
                var rectElemnt = elemnt.getBoundingClientRect();
                if (newTop >= rectHolder.y + 8) {
                    elemnt.style.top =
                        Math.min(newTop, rectHolder.y + rectHolder.height - rectElemnt.height - 4) + 'px';
                }
                if (newLeft > rectHolder.x + 4 &&
                    rectHolder.x + rectHolder.width > rectElemnt.x + rectElemnt.width + 2) {
                    elemnt.style.left =
                        Math.min(newLeft, rectHolder.x + rectHolder.width - rectElemnt.width - 4) + 'px';
                }
            }
            function closeDragElement() {
                /* stop moving when mouse button is released:*/
                document.onmouseup = null;
                document.onmousemove = null;
                document.ontouchend = null;
                document.ontouchmove = null;
            }
        };
        NgpImagePickerComponent.prototype.onCropStateChange = function () {
            var _this = this;
            var croper = document.getElementById('image-croper');
            if (this.showCrop) {
                croper.style.opacity = '1.0';
                this.dragElement(croper);
                this.observer = new resizeObserver.ResizeObserver(function (entries) {
                    entries.forEach(function (entry) {
                        if (_this.showEditPanel) {
                            var elemntCropper = document.getElementById('image-croper');
                            var rectHolder = document
                                .getElementById('image-full')
                                .getBoundingClientRect();
                            var rectElemnt = elemntCropper.getBoundingClientRect();
                            var maxWidth = rectHolder.x + rectHolder.width - rectElemnt.x - 4;
                            var maxHeight = rectHolder.y + rectHolder.height - rectElemnt.y - 4;
                            elemntCropper.style.maxWidth = maxWidth + 'px';
                            elemntCropper.style.maxHeight = maxHeight + 'px';
                            _this.cropWidth = rectElemnt.width;
                            _this.cropHeight = rectElemnt.height;
                            if (entry.target.id == 'image-full') {
                                if (rectHolder.top > 0) {
                                    elemntCropper.style.top = rectHolder.top + 4 + 'px';
                                }
                                elemntCropper.style.left = rectHolder.left + 4 + 'px';
                            }
                        }
                    });
                });
                this.observer.observe(document.getElementById('image-croper'));
                this.observer.observe(document.getElementById('image-full'));
            }
            else {
                croper.style.opacity = '0.0';
                if (this.observer instanceof resizeObserver.ResizeObserver) {
                    this.observer.unobserve(document.getElementById('image-croper'));
                    this.observer.unobserve(document.getElementById('image-full'));
                }
            }
        };
        NgpImagePickerComponent.prototype.onCrop = function (type) {
            var _this = this;
            type = type ? type : this.format;
            var croper = document.getElementById('image-croper');
            var rectCroper = croper.getBoundingClientRect();
            var dataHolderRect = document
                .getElementById('image-full')
                .getBoundingClientRect();
            var canvas = document.createElement('canvas');
            new Promise(function (resolve, reject) {
                var ctx = canvas.getContext('2d');
                var img = document.getElementById('image-full');
                var image = new Image();
                image.src = _this.imageSrc;
                image.onload = function () {
                    var ratio = image.height / dataHolderRect.height;
                    var newWidth = rectCroper.width * ratio;
                    var newHeight = rectCroper.height * ratio;
                    canvas.height = newHeight;
                    canvas.width = newWidth;
                    ctx.drawImage(image, Math.abs(rectCroper.x * ratio) - Math.abs(dataHolderRect.x * ratio), Math.abs(rectCroper.y * ratio) - Math.abs(dataHolderRect.y * ratio), newWidth, newHeight, 0, 0, newWidth, newHeight);
                    // ctx.drawImage(image, 90, 130, 50, 60, 10, 10, 50, 60);
                    resolve(canvas.toDataURL("image/" + type, 0.98));
                };
                image.onerror = function (e) {
                    reject(e);
                };
            })
                .then(function (dataUri) {
                // console.log('NgpImagePickerComponent -> onCrop -> dataUri', dataUri);
                _this.imageSrc = dataUri;
                _this.showCrop = false;
                _this.onCropStateChange();
                _this.maxWidth = canvas.width;
                _this.maxHeight = canvas.height;
                _this.lastOriginSrc = _this.originImageSrc + '';
                _this.originImageSrc = dataUri;
                _this.$imageChanged.next(_this.imageSrc);
            })
                .catch(function (e) {
                console.log(e);
            });
        };
        NgpImagePickerComponent.prototype.onRestore = function () {
            if (this.arrayCopiedImages.length) {
                var lastState = this.arrayCopiedImages.pop();
                this.imageSrc = lastState.lastImage;
                this.maxWidth = lastState.width;
                this.maxHeight = lastState.height;
                this.originImageSrc = this.lastOriginSrc + '';
            }
            else {
                this.imageSrc = this.lastOriginSrc;
                this.originImageSrc = this.lastOriginSrc + '';
            }
            this.$imageChanged.next(this.imageSrc);
        };
        NgpImagePickerComponent.prototype.onRemove = function () {
            this.imageSrc = null;
            this.originImageSrc = null;
            this.loadImage = false;
            this.arrayCopiedImages = [];
            this.lastOriginSrc = null;
            this.$imageOriginal.next(null);
            this.$imageChanged.next(null);
            this.format = 'jpeg';
            this.maxHeight = 2000;
            this.maxWidth = 2000;
            this.cropHeight = 150;
            this.cropWidth = 150;
            this.maintainAspectRatio = true;
            this.showEditPanel = false;
        };
        return NgpImagePickerComponent;
    }());
    NgpImagePickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ngp-image-picker',
                    template: "<div *ngIf=\"!loadImage\" class=\"place-image\">\n  <div class=\"image-holder\" [ngStyle]=\"{\n      width: this.config.width,\n      height: this.config.height,\n      borderRadius: this.config.borderRadius\n    }\">\n    <button matTooltip=\"{{ labels['Upload a image'] }}\" class=\"image-upload-btn\" mat-icon-button\n      (click)=\"onUpload($event)\">\n      <mat-icon class=\"mat-18\">add_a_photo</mat-icon>\n    </button>\n\n    <input #imagePicker type=\"file\" style=\"display: none\" [id]=\"'filePicker-' + this.uuidFilePicker\"\n      (change)=\"handleFileSelect($event)\" />\n  </div>\n</div>\n<div *ngIf=\"loadImage\" class=\"place-image\">\n  <div class=\"image-holder-loaded\" [ngStyle]=\"{\n      width: this.config.width,\n      height: this.config.height,\n      borderRadius: this.config.borderRadius\n    }\">\n    <img [src]=\"this.imageSrc\" alt=\"image-loaded\" [ngStyle]=\"{ borderRadius: this.config.borderRadius }\" />\n    <input #imagePicker type=\"file\" style=\"display: none\" [id]=\"'filePicker-' + this.uuidFilePicker\"\n      (change)=\"handleFileSelect($event)\" />\n  </div>\n  <p *ngIf=\"this.calculateSize()\" class=\"mat-caption image-caption\" [ngStyle]=\"{\n      color: this.calculateSize() > 120 ? '#f44336' : 'unset',\n      fontWeight: this.calculateSize() > 120 ? '500' : 'unset'\n    }\">\n    size: {{ this.calculateSize() }}Kb &nbsp; {{ this.format }}\n  </p>\n\n  <div\n    style=\"flex-direction: row; box-sizing: border-box; display: flex; place-content: flex-start; align-items: flex-start\"\n    class=\"editing-bar-btn\">\n    <button *ngIf=\"!this.config.hideAddBtn\" mat-icon-button matTooltip=\"{{ labels['Upload a image'] }}\" (click)=\"onUpload($event)\">\n      <mat-icon class=\"mat-18\">add_a_photo</mat-icon>\n    </button>\n    <button *ngIf=\"!this.config.hideEditBtn\" mat-icon-button matTooltip=\"{{ labels['Open the editor panel'] }}\" (click)=\"onOpenEditPanel()\">\n      <mat-icon class=\"mat-18\">edit</mat-icon>\n    </button>\n    <a *ngIf=\"!this.config.hideDownloadBtn\" matTooltip=\"{{ labels['Download the image'] }}\" [href]=\"this.imageSrc\" mat-icon-button\n      download=\"{{ imageName }}\">\n      <mat-icon class=\"mat-18\">cloud_download</mat-icon>\n    </a>\n    <button *ngIf=\"!this.config.hideDeleteBtn\" mat-icon-button  matTooltip=\"{{ labels['Remove'] }}\" (click)=\"onRemove()\">\n      <mat-icon class=\"mat-18\">delete</mat-icon>\n    </button>\n  </div>\n</div>\n\n<div *ngIf=\"showEditPanel\" id=\"popup\" class=\"popup\">\n  <div\n    style=\"flex-direction: row; box-sizing: border-box; display: flex; place-content: center flex-end; align-items: center\">\n    <button mat-icon-button (click)=\"onCloseEditPanel()\">\n      <mat-icon class=\"mat-18\">clear</mat-icon>\n    </button>\n  </div>\n\n  <div class=\"image-container\">\n    <div class=\"image-holder-full\">\n      <img id=\"image-full\" [src]=\"this.imageSrc\" />\n\n      <div id=\"image-croper\" class=\"image-croper\">\n        <div id=\"image-croper-header\">\n          <mat-icon>drag_indicator</mat-icon>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"control-panel\">\n      <p class=\"title-panel\">{{ labels['Control Panel'] }}</p>\n\n      <p class=\"item-panel\">{{ labels['Quality'] }}</p>\n      <div\n        style=\"flex-direction: row; box-sizing: border-box; display: flex; place-content: flex-start; align-items: flex-start\">\n        <mat-slider color=\"primary\" style=\"max-width: 100%; width: 100%\" (change)=\"onChangeQuality($event.value)\"\n          [(ngModel)]=\"quality\" [min]=\"0\" [max]=\"100\" [step]=\"1\" [thumbLabel]=\"true\">\n        </mat-slider>\n      </div>\n\n      <p class=\"item-panel\">\n        {{ labels['Max dimensions'] }}\n        <mat-checkbox style=\"float: right\" [(ngModel)]=\"maintainAspectRatio\" color=\"primary\">\n          <span class=\"mat-caption\">{{ labels['aspect-ratio'] }}</span>\n        </mat-checkbox>\n      </p>\n      <div\n        style=\"margin-top: 8px !important; flex-flow: row wrap; box-sizing: border-box; display: flex; place-content: flex-start space-between; align-items: flex-start\">\n        <mat-form-field class=\"no-input-style\" style=\"max-width: 48%; width: 48%\" appearance=\"fill\">\n          <mat-label>{{ labels['max-width(px)'] }}</mat-label>\n          <input (change)=\"onChangeSize(true, false)\" matInput placeholder=\"{{ labels['max-width(px)'] }}\"\n            [(ngModel)]=\"maxWidth\" type=\"number\" [min]=\"0\" [max]=\"2000\" />\n        </mat-form-field>\n\n        <mat-form-field class=\"no-input-style\" style=\"max-width: 48%; width: 48%\" appearance=\"fill\">\n          <mat-label>{{ labels['max-height(px)'] }}</mat-label>\n          <input (change)=\"onChangeSize(false, true)\" matInput placeholder=\"{{ labels['max-height(px)'] }}\"\n            [(ngModel)]=\"maxHeight\" type=\"number\" [min]=\"0\" [max]=\"2000\" />\n        </mat-form-field>\n      </div>\n\n      <p class=\"item-panel\">{{ labels['Format'] }}</p>\n      <div\n        style=\"margin-top: 8px !important; flex-direction: row; box-sizing: border-box; display: flex; place-content: flex-start; align-items: flex-start\">\n        <mat-form-field class=\"no-input-style\" style=\"max-width: 100%; width: 100%\" appearance=\"fill\" color=\"primary\">\n          <mat-select [(ngModel)]=\"format\" (selectionChange)=\"onChangeFormat($event.value)\">\n            <mat-option *ngFor=\"let format of allFormats\" [value]=\"format\">\n              {{ format }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n\n      <p>\n        <mat-checkbox (change)=\"onCropStateChange()\" [(ngModel)]=\"showCrop\" color=\"primary\">\n          <p class=\"item-panel\">{{ labels['Crop'] }}</p>\n        </mat-checkbox>\n        <button style=\"float: right\" mat-icon-button color=\"primary\" (click)=\"onRestore()\">\n          <mat-icon> refresh </mat-icon>\n        </button>\n      </p>\n\n      <ng-container *ngIf=\"showCrop\">\n        <div\n          style=\"margin-top: 8px !important; flex-flow: row wrap; box-sizing: border-box; display: flex; place-content: flex-start space-between; align-items: flex-start\">\n          <mat-form-field class=\"no-input-style\" style=\"max-width: 48%; width: 48%\" appearance=\"fill\">\n            <mat-label>{{ labels['width(px)'] }}</mat-label>\n            <input (change)=\"onChangeCrop($event.target.valueAsNumber)\" matInput placeholder=\"{{ labels['width(px)'] }}\"\n              [(ngModel)]=\"cropWidth\" type=\"number\" [min]=\"0\" [max]=\"2000\" />\n          </mat-form-field>\n          <mat-form-field class=\"no-input-style\" style=\"max-width: 48%; width: 48%\" appearance=\"fill\">\n            <mat-label>{{ labels['height(px)'] }}</mat-label>\n            <input (change)=\"onChangeCrop($event.target.valueAsNumber)\" matInput\n              placeholder=\"{{ labels['height(px)'] }}\" [(ngModel)]=\"cropHeight\" type=\"number\" [min]=\"0\" [max]=\"2000\" />\n          </mat-form-field>\n        </div>\n\n        <p style=\"margin-bottom: 4px !important\">\n          <button mat-icon-button color=\"primary\" (click)=\"onCrop()\">\n            <mat-icon> crop </mat-icon>\n          </button>\n        </p>\n      </ng-container>\n\n      <div\n        style=\"flex-direction: row; box-sizing: border-box; display: flex; place-content: center space-between; align-items: center\">\n        <button style=\"padding: 0px 8px; height: 34px; box-sizing: border-box; background-color: #fff; color: black\"\n          mat-flat-button (click)=\"onCloseEditPanel()\">Guardar</button>\n\n        <p *ngIf=\"this.calculateSize()\" class=\"mat-caption image-caption\" [ngStyle]=\"{\n            color: this.calculateSize() > 120 ? '#f44336' : 'unset',\n            fontWeight: this.calculateSize() > 120 ? '500' : 'unset'\n          }\">\n          size: {{ this.calculateSize() }}Kb &nbsp; {{ this.format }}\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    encapsulation: core.ViewEncapsulation.None,
                    styles: ["ngp-image-picker p{margin:0!important;padding:0!important}ngp-image-picker .place-image{align-items:flex-start;box-sizing:border-box;display:flex;flex-direction:column;place-content:flex-start}ngp-image-picker .place-image .image-holder{align-items:center;background-color:#fcfcfc;border:2px solid rgba(0,0,0,.3);border-radius:16px;box-sizing:border-box;display:flex;flex-direction:column;height:240px;max-width:100%!important;place-content:center;position:relative;width:320px}@media (max-width:599px){ngp-image-picker .place-image .image-holder{max-height:250px!important;max-width:100%!important}}ngp-image-picker .place-image .image-holder .image-upload-btn{color:#424242;height:50px;opacity:.85;position:relative;transition:all .5s ease;width:50px}ngp-image-picker .place-image .image-holder .image-upload-btn mat-icon{color:#424242;font-size:50px;height:50px;line-height:50px;width:50px}@media (max-width:599px){ngp-image-picker .place-image .image-holder .image-upload-btn{height:30px;opacity:1;width:30px}ngp-image-picker .place-image .image-holder .image-upload-btn mat-icon{font-size:30px;height:30px;line-height:30px;width:30px}}ngp-image-picker .place-image .image-holder:hover .image-upload-btn{opacity:1;transition:all .5s ease}ngp-image-picker .place-image .image-holder-loaded{align-items:center;border-radius:4px;box-sizing:border-box;display:flex;flex-direction:column;height:240px;max-width:100%!important;padding:2px;place-content:center;position:relative;width:320px}ngp-image-picker .place-image .image-holder-loaded .image-caption{bottom:-22px;position:absolute;right:0}ngp-image-picker .place-image .image-holder-loaded img{-o-object-fit:cover;-o-object-position:center;height:100%;max-height:100%;max-width:100%;object-fit:cover;object-position:center;width:100%}@media (max-width:599px){ngp-image-picker .place-image .image-holder-loaded{max-height:195px!important}}ngp-image-picker .place-image .image-holder-loaded .image-upload-btn{color:#424242;height:50px;opacity:.85;position:relative;transition:all .5s ease;width:50px}ngp-image-picker .place-image .image-holder-loaded .image-upload-btn mat-icon{color:#424242;font-size:50px;height:50px;line-height:50px;width:50px}@media (max-width:599px){ngp-image-picker .place-image .image-holder-loaded .image-upload-btn{height:30px;opacity:1;width:30px}ngp-image-picker .place-image .image-holder-loaded .image-upload-btn mat-icon{font-size:30px;height:30px;line-height:30px;width:30px}}ngp-image-picker .place-image .image-holder-loaded:hover .image-upload-btn{opacity:1;transition:all .5s ease}ngp-image-picker .place-image .editing-bar-btn{margin-top:2px}ngp-image-picker .place-image .editing-bar-btn .mat-icon-button{height:20px;line-height:20px;width:24px}ngp-image-picker .place-image .editing-bar-btn mat-icon{font-size:20px!important;height:20px!important;line-height:20px!important;width:20px!important}ngp-image-picker .place-image .editing-bar-btn button{color:#424242;margin:4px;transition:all .5s ease}ngp-image-picker .place-image .editing-bar-btn button:hover{margin:4px 8px;transform:scale(1.25);transition:all .25s ease-in}ngp-image-picker .place-image .editing-bar-btn a{color:#424242;margin:4px;transition:all .5s ease}ngp-image-picker .place-image .editing-bar-btn a:hover{margin:4px 8px;transform:scale(1.25);transition:all .25s ease-in}ngp-image-picker .popup{-webkit-animation-duration:.4s;-webkit-animation-name:show;animation-duration:.4s;animation-name:show;background-color:rgba(0,0,0,.8);box-sizing:border-box;color:#fff;height:100%;left:0;max-height:100%;overflow:auto;padding:24px;position:fixed;top:0;width:100vw;z-index:1000}ngp-image-picker .popup .image-container{align-items:flex-start;box-sizing:border-box;display:flex;flex-flow:row wrap;height:100%;margin-bottom:50px;margin-top:50px;min-height:100%;min-width:100%;place-content:flex-start center;width:100%}ngp-image-picker .popup .image-container .image-holder-full{display:contents;height:auto;position:relative;width:auto}ngp-image-picker .popup mat-icon{color:#fff}ngp-image-picker .popup img{-o-object-fit:cover;-o-object-position:center;margin:8px;max-height:600px;max-width:100%;object-fit:cover;object-position:center;transition:all .5s ease}@media (max-width:1024px){ngp-image-picker .popup{background-color:rgba(0,0,0,.85);padding:8px}ngp-image-picker .popup img{max-height:100%;max-width:100%}}@media (max-width:599px){ngp-image-picker .popup img{margin:0}}ngp-image-picker .popup .control-panel{align-items:stretch;background-color:rgba(0,0,0,.92);border-radius:8px;box-sizing:border-box;color:#fff;display:flex;flex-direction:column;margin:8px;max-width:100%;padding:16px;place-content:stretch flex-start;width:18rem}@media (max-width:599px){ngp-image-picker .popup .control-panel{margin:8px 0;width:100%}}ngp-image-picker .popup .control-panel .title-panel{font-size:17px;font-weight:500;margin-bottom:16px!important;padding:0 4px}ngp-image-picker .popup .control-panel .item-panel{font-size:14px;font-weight:500;padding:0 4px}@-webkit-keyframes show{0%{opacity:0;top:-100vh}to{opacity:1;top:0}}@keyframes show{0%{opacity:0;top:-100vh}to{opacity:1;top:0}}ngp-image-picker .mat-form-field-appearance-fill .mat-form-field-flex{background-color:#fafafa!important}ngp-image-picker .mat-select-panel{background:#fafafa!important}ngp-image-picker input.mat-input-element{color:rgba(0,0,0,.85)}ngp-image-picker .mat-checkbox-background{background-color:#fff}ngp-image-picker .image-croper{border:2.5px solid #fafafa;box-sizing:border-box;height:150px;opacity:0;overflow:auto;position:absolute;resize:both;width:150px}ngp-image-picker .image-croper #image-croper-header{background-color:transparent;color:#fff;cursor:move;height:85%;padding:10px;z-index:10}ngp-image-picker .image-croper #image-croper-header mat-icon{color:#fff}ngp-image-picker .btn{border-radius:4px;cursor:pointer;padding:4px 8px}ngp-image-picker .btn mat-icon{color:rgba(0,0,0,.82)}"]
                },] }
    ];
    NgpImagePickerComponent.ctorParameters = function () { return []; };
    NgpImagePickerComponent.propDecorators = {
        _imageSrc: [{ type: core.Input }],
        _config: [{ type: core.Input }],
        imagePicker: [{ type: core.ViewChild, args: ['imagePicker', { static: false },] }],
        $imageChanged: [{ type: core.Output }],
        $imageOriginal: [{ type: core.Output }]
    };

    var NgpImagePickerModule = /** @class */ (function () {
        function NgpImagePickerModule() {
        }
        return NgpImagePickerModule;
    }());
    NgpImagePickerModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgpImagePickerComponent],
                    imports: [
                        common.CommonModule,
                        icon.MatIconModule,
                        button.MatButtonModule,
                        tooltip.MatTooltipModule,
                        slider.MatSliderModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        formField.MatFormFieldModule,
                        select.MatSelectModule,
                        input.MatInputModule,
                        checkbox.MatCheckboxModule,
                    ],
                    exports: [NgpImagePickerComponent],
                },] }
    ];

    /*
     * Public API Surface of ngp-image-picker
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgpImagePickerComponent = NgpImagePickerComponent;
    exports.NgpImagePickerModule = NgpImagePickerModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngp-image-picker.umd.js.map
