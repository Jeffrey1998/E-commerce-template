import { Component, Input } from '@angular/core';
import { ActivatedRoute, Router, NavigationEnd, PRIMARY_OUTLET } from '@angular/router';
import { filter, map } from 'rxjs/operators';
import { NgDynamicBreadcrumbService } from './ng-dynamic-breadcrumb.service';
export class NgDynamicBreadcrumbComponent {
    constructor(activatedRoute, router, ngDynamicBreadcrumbService) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.ngDynamicBreadcrumbService = ngDynamicBreadcrumbService;
        this.breadcrumb = [];
        this.bgColor = '#eee';
        this.fontSize = '18px';
        this.fontColor = '#0275d8';
        this.lastLinkColor = '#000';
        this.symbol = ' / ';
        this.breadCrumbData();
    }
    ngOnInit() {
        this.ngDynamicBreadcrumbService.breadcrumbLabels.subscribe((labelData) => {
            for (const label in labelData) {
                if (labelData.hasOwnProperty(label)) {
                    this.breadcrumb.map((crumb) => {
                        const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                        if (labelParams) {
                            for (const labelParam of labelParams) {
                                const dynamicData = labelData[label];
                                if (labelParam === label) {
                                    crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);
                                }
                            }
                        }
                    });
                }
            }
        });
        this.ngDynamicBreadcrumbService.newBreadcrumb.subscribe((breadcrumb) => {
            if (breadcrumb.length > 0) {
                this.updateData(this.activatedRoute, breadcrumb);
            }
        });
    }
    breadCrumbData() {
        this.router.events
            .pipe(filter(event => event instanceof NavigationEnd))
            .pipe(map(() => this.activatedRoute))
            .pipe(map((route) => {
            while (route.firstChild) {
                route = route.firstChild;
            }
            return route;
        }))
            .pipe(filter(route => route.outlet === PRIMARY_OUTLET))
            .subscribe(route => {
            this.params = route.snapshot.params;
            this.updateData(route, null);
        });
    }
    updateData(route, newBreadcrumb) {
        if (route.snapshot.data.breadcrumb || newBreadcrumb) {
            const data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;
            const breadcrumb = (JSON.parse(JSON.stringify(data)));
            breadcrumb.map((crumb) => {
                const urlChunks = crumb.url.split('/');
                for (const chunk of urlChunks) {
                    if (chunk.includes(':')) {
                        const paramID = chunk.replace(':', '');
                        // const routerParamID = route.snapshot.params[paramID];
                        const routerParamID = this.params[paramID];
                        crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);
                    }
                }
                const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                if (labelParams) {
                    for (const labelParam of labelParams) {
                        // const routerParamID = route.snapshot.params[labelParam.trim()];
                        const routerParamID = this.params[labelParam.trim()];
                        if (routerParamID) {
                            crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);
                        }
                        else {
                            // crumb.label = crumb.label.replace('{{' + labelParam + '}}', '');
                        }
                    }
                }
            });
            this.breadcrumb = breadcrumb;
        }
        else {
            this.breadcrumb = [];
        }
    }
}
NgDynamicBreadcrumbComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'app-ng-dynamic-breadcrumb',
                template: "<ul class=\"custom-bread-crumb\" [ngStyle]=\"{'background-color': bgColor}\">\r\n  <span *ngFor=\"let item of breadcrumb; let i = index\">\r\n      <li [ngStyle]=\"{'font-size': fontSize}\">\r\n          <a *ngIf=\"item?.url\" [routerLink]=\"item?.url\" [ngStyle]=\"{'color': fontColor}\">{{ item.label }}</a>\r\n          <span *ngIf=\"!item?.url\" [ngStyle]=\"{'color': lastLinkColor}\">{{ item.label }}</span>\r\n          <span class=\"line\" *ngIf=\"breadcrumb.length !== i+1\">{{symbol}}</span>\r\n      </li>\r\n  </span>\r\n</ul>\r\n",
                styles: [".custom-bread-crumb{list-style:none;padding:10px 16px}.custom-bread-crumb li{display:inline}.custom-bread-crumb .line{padding-right:3px}.custom-bread-crumb li a{text-decoration:none}.custom-bread-crumb li a:hover{color:#01447e;text-decoration:underline}"]
            },] }
];
NgDynamicBreadcrumbComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: NgDynamicBreadcrumbService }
];
NgDynamicBreadcrumbComponent.propDecorators = {
    bgColor: [{ type: Input }],
    fontSize: [{ type: Input }],
    fontColor: [{ type: Input }],
    lastLinkColor: [{ type: Input }],
    symbol: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZHluYW1pYy1icmVhZGNydW1iLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWR5bmFtaWMtYnJlYWRjcnVtYi9zcmMvbGliL25nLWR5bmFtaWMtYnJlYWRjcnVtYi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBb0IsTUFBTSxpQkFBaUIsQ0FBQztBQUMxRyxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBWSxNQUFNLGdCQUFnQixDQUFDO0FBRXZELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBUTdFLE1BQU0sT0FBTyw0QkFBNEI7SUFXdkMsWUFDVSxjQUE4QixFQUM5QixNQUFjLEVBQ2QsMEJBQXNEO1FBRnRELG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsK0JBQTBCLEdBQTFCLDBCQUEwQixDQUE0QjtRQVpoRSxlQUFVLEdBQWlCLEVBQUUsQ0FBQztRQUNyQixZQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ2pCLGFBQVEsR0FBRyxNQUFNLENBQUM7UUFDbEIsY0FBUyxHQUFHLFNBQVMsQ0FBQztRQUN0QixrQkFBYSxHQUFHLE1BQU0sQ0FBQztRQUN2QixXQUFNLEdBQUcsS0FBSyxDQUFDO1FBU3RCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUN2RSxLQUFLLE1BQU0sS0FBSyxJQUFJLFNBQVMsRUFBRTtnQkFDN0IsSUFBSSxTQUFTLENB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cnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciwgTmF2aWdhdGlvbkVuZCwgUFJJTUFSWV9PVVRMRVQsIFJvdXRlc1JlY29nbml6ZWQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgbWVyZ2VNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEJyZWFkY3J1bWIgfSBmcm9tICcuL2JyZWFkY3J1bWIubW9kZWwnO1xyXG5pbXBvcnQgeyBOZ0R5bmFtaWNCcmVhZGNydW1iU2VydmljZSB9IGZyb20gJy4vbmctZHluYW1pYy1icmVhZGNydW1iLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjb21wb25lbnQtc2VsZWN0b3JcclxuICBzZWxlY3RvcjogJ2FwcC1uZy1keW5hbWljLWJyZWFkY3J1bWInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9uZy1keW5hbWljLWJyZWFkY3J1bWIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL25nLWR5bmFtaWMtYnJlYWRjcnVtYi5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIE5nRHluYW1pY0JyZWFkY3J1bWJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBicmVhZGNydW1iOiBCcmVhZGNydW1iW10gPSBbXTtcclxuICBASW5wdXQoKSBiZ0NvbG9yID0gJyNlZWUnO1xyXG4gIEBJbnB1dCgpIGZvbnRTaXplID0gJzE4cHgnO1xyXG4gIEBJbnB1dCgpIGZvbnRDb2xvciA9ICcjMDI3NWQ4JztcclxuICBASW5wdXQoKSBsYXN0TGlua0NvbG9yID0gJyMwMDAnO1xyXG4gIEBJbnB1dCgpIHN5bWJvbCA9ICcgLyAnO1xyXG4gIHBhcmFtczogeyBba2V5OiBzdHJpbmddOiBhbnk7IH07XHJcblxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLFxyXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcclxuICAgIHByaXZhdGUgbmdEeW5hbWljQnJlYWRjcnVtYlNlcnZpY2U6IE5nRHluYW1pY0JyZWFkY3J1bWJTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICB0aGlzLmJyZWFkQ3J1bWJEYXRhKCk7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMubmdEeW5hbWljQnJlYWRjcnVtYlNlcnZpY2UuYnJlYWRjcnVtYkxhYmVscy5zdWJzY3JpYmUoKGxhYmVsRGF0YSkgPT4ge1xyXG4gICAgICBmb3IgKGNvbnN0IGxhYmVsIGluIGxhYmVsRGF0YSkge1xyXG4gICAgICAgIGlmIChsYWJlbERhdGEuaGFzT3duUHJvcGVydHkobGFiZWwpKSB7XHJcbiAgICAgICAgICB0aGlzLmJyZWFkY3J1bWIubWFwKChjcnVtYikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsYWJlbFBhcmFtcyA9IGNydW1iLmxhYmVsLm1hdGNoKC9bXnt7XSsoPz1cXH19KS9nKTtcclxuICAgICAgICAgICAgaWYgKGxhYmVsUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgZm9yIChjb25zdCBsYWJlbFBhcmFtIG9mIGxhYmVsUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkeW5hbWljRGF0YSA9IGxhYmVsRGF0YVtsYWJlbF07XHJcbiAgICAgICAgICAgICAgICBpZiAobGFiZWxQYXJhbSA9PT0gbGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgY3J1bWIubGFiZWwgPSBjcnVtYi5sYWJlbC5yZXBsYWNlKCd7eycgKyBsYWJlbFBhcmFtICsgJ319JywgZHluYW1pY0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLm5nRHluYW1pY0JyZWFkY3J1bWJTZXJ2aWNlLm5ld0JyZWFkY3J1bWIuc3Vic2NyaWJlKChicmVhZGNydW1iOiBCcmVhZGNydW1iW10pID0+IHtcclxuICAgICAgaWYgKGJyZWFkY3J1bWIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlRGF0YSh0aGlzLmFjdGl2YXRlZFJvdXRlLCBicmVhZGNydW1iKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGJyZWFkQ3J1bWJEYXRhKCk6IHZvaWQge1xyXG4gICAgdGhpcy5yb3V0ZXIuZXZlbnRzXHJcbiAgICAgIC5waXBlKGZpbHRlcihldmVudCA9PiBldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpKVxyXG4gICAgICAucGlwZShtYXAoKCkgPT4gdGhpcy5hY3RpdmF0ZWRSb3V0ZSkpXHJcbiAgICAgIC5waXBlKG1hcCgocm91dGUpID0+IHtcclxuICAgICAgICB3aGlsZSAocm91dGUuZmlyc3RDaGlsZCkgeyByb3V0ZSA9IHJvdXRlLmZpcnN0Q2hpbGQ7IH1cclxuICAgICAgICByZXR1cm4gcm91dGU7XHJcbiAgICAgIH0pKVxyXG4gICAgICAucGlwZShmaWx0ZXIocm91dGUgPT4gcm91dGUub3V0bGV0ID09PSBQUklNQVJZX09VVExFVCkpXHJcbiAgICAgIC5zdWJzY3JpYmUocm91dGUgPT4ge1xyXG4gICAgICAgIHRoaXMucGFyYW1zID0gcm91dGUuc25hcHNob3QucGFyYW1zO1xyXG4gICAgICAgIHRoaXMudXBkYXRlRGF0YShyb3V0ZSwgbnVsbCk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVEYXRhKHJvdXRlLCBuZXdCcmVhZGNydW1iKTogdm9pZCB7XHJcbiAgICBpZiAocm91dGUuc25hcHNob3QuZGF0YS5icmVhZGNydW1iIHx8IG5ld0JyZWFkY3J1bWIpIHtcclxuICAgICAgY29uc3QgZGF0YSA9IHJvdXRlLnNuYXBzaG90LmRhdGEuYnJlYWRjcnVtYiA/IHJvdXRlLnNuYXBzaG90LmRhdGEuYnJlYWRjcnVtYiA6IG5ld0JyZWFkY3J1bWI7XHJcbiAgICAgIGNvbnN0IGJyZWFkY3J1bWIgPSAoSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSkpO1xyXG4gICAgICBicmVhZGNydW1iLm1hcCgoY3J1bWIpID0+IHtcclxuXHJcbiAgICAgICAgY29uc3QgdXJsQ2h1bmtzID0gY3J1bWIudXJsLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaHVuayBvZiB1cmxDaHVua3MpIHtcclxuICAgICAgICAgIGlmIChjaHVuay5pbmNsdWRlcygnOicpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtSUQgPSBjaHVuay5yZXBsYWNlKCc6JywgJycpO1xyXG4gICAgICAgICAgICAvLyBjb25zdCByb3V0ZXJQYXJhbUlEID0gcm91dGUuc25hcHNob3QucGFyYW1zW3BhcmFtSURdO1xyXG4gICAgICAgICAgICBjb25zdCByb3V0ZXJQYXJhbUlEID0gdGhpcy5wYXJhbXNbcGFyYW1JRF07XHJcbiAgICAgICAgICAgIGNydW1iLnVybCA9IGNydW1iLnVybC5yZXBsYWNlKGA6JHtwYXJhbUlEfWAsIHJvdXRlclBhcmFtSUQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbGFiZWxQYXJhbXMgPSBjcnVtYi5sYWJlbC5tYXRjaCgvW157e10rKD89XFx9fSkvZyk7XHJcbiAgICAgICAgaWYgKGxhYmVsUGFyYW1zKSB7XHJcbiAgICAgICAgICBmb3IgKGNvbnN0IGxhYmVsUGFyYW0gb2YgbGFiZWxQYXJhbXMpIHtcclxuICAgICAgICAgICAgLy8gY29uc3Qgcm91dGVyUGFyYW1JRCA9IHJvdXRlLnNuYXBzaG90LnBhcmFtc1tsYWJlbFBhcmFtLnRyaW0oKV07XHJcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlclBhcmFtSUQgPSB0aGlzLnBhcmFtc1tsYWJlbFBhcmFtLnRyaW0oKV07XHJcbiAgICAgICAgICAgIGlmIChyb3V0ZXJQYXJhbUlEKSB7XHJcbiAgICAgICAgICAgICAgY3J1bWIubGFiZWwgPSBjcnVtYi5sYWJlbC5yZXBsYWNlKCd7eycgKyBsYWJlbFBhcmFtICsgJ319Jywgcm91dGVyUGFyYW1JRCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgLy8gY3J1bWIubGFiZWwgPSBjcnVtYi5sYWJlbC5yZXBsYWNlKCd7eycgKyBsYWJlbFBhcmFtICsgJ319JywgJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuYnJlYWRjcnVtYiA9IGJyZWFkY3J1bWI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmJyZWFkY3J1bWIgPSBbXTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbiJdfQ==