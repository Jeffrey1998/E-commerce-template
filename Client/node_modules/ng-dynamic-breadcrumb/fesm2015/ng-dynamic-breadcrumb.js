import { ɵɵdefineInjectable, Injectable, Component, Input, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NavigationEnd, PRIMARY_OUTLET, ActivatedRoute, Router, RouterModule } from '@angular/router';
import { filter, map } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

class NgDynamicBreadcrumbService {
    constructor() {
        this.breadcrumbLabels = new BehaviorSubject([]);
        this.newBreadcrumb = new BehaviorSubject([]);
    }
    updateBreadcrumbLabels(labels) {
        this.breadcrumbLabels.next(labels);
    }
    updateBreadcrumb(newBreadcrumb) {
        this.newBreadcrumb.next(newBreadcrumb);
    }
}
NgDynamicBreadcrumbService.ɵprov = ɵɵdefineInjectable({ factory: function NgDynamicBreadcrumbService_Factory() { return new NgDynamicBreadcrumbService(); }, token: NgDynamicBreadcrumbService, providedIn: "root" });
NgDynamicBreadcrumbService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgDynamicBreadcrumbService.ctorParameters = () => [];

class NgDynamicBreadcrumbComponent {
    constructor(activatedRoute, router, ngDynamicBreadcrumbService) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.ngDynamicBreadcrumbService = ngDynamicBreadcrumbService;
        this.breadcrumb = [];
        this.bgColor = '#eee';
        this.fontSize = '18px';
        this.fontColor = '#0275d8';
        this.lastLinkColor = '#000';
        this.symbol = ' / ';
        this.breadCrumbData();
    }
    ngOnInit() {
        this.ngDynamicBreadcrumbService.breadcrumbLabels.subscribe((labelData) => {
            for (const label in labelData) {
                if (labelData.hasOwnProperty(label)) {
                    this.breadcrumb.map((crumb) => {
                        const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                        if (labelParams) {
                            for (const labelParam of labelParams) {
                                const dynamicData = labelData[label];
                                if (labelParam === label) {
                                    crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);
                                }
                            }
                        }
                    });
                }
            }
        });
        this.ngDynamicBreadcrumbService.newBreadcrumb.subscribe((breadcrumb) => {
            if (breadcrumb.length > 0) {
                this.updateData(this.activatedRoute, breadcrumb);
            }
        });
    }
    breadCrumbData() {
        this.router.events
            .pipe(filter(event => event instanceof NavigationEnd))
            .pipe(map(() => this.activatedRoute))
            .pipe(map((route) => {
            while (route.firstChild) {
                route = route.firstChild;
            }
            return route;
        }))
            .pipe(filter(route => route.outlet === PRIMARY_OUTLET))
            .subscribe(route => {
            this.params = route.snapshot.params;
            this.updateData(route, null);
        });
    }
    updateData(route, newBreadcrumb) {
        if (route.snapshot.data.breadcrumb || newBreadcrumb) {
            const data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;
            const breadcrumb = (JSON.parse(JSON.stringify(data)));
            breadcrumb.map((crumb) => {
                const urlChunks = crumb.url.split('/');
                for (const chunk of urlChunks) {
                    if (chunk.includes(':')) {
                        const paramID = chunk.replace(':', '');
                        // const routerParamID = route.snapshot.params[paramID];
                        const routerParamID = this.params[paramID];
                        crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);
                    }
                }
                const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                if (labelParams) {
                    for (const labelParam of labelParams) {
                        // const routerParamID = route.snapshot.params[labelParam.trim()];
                        const routerParamID = this.params[labelParam.trim()];
                        if (routerParamID) {
                            crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);
                        }
                        else {
                            // crumb.label = crumb.label.replace('{{' + labelParam + '}}', '');
                        }
                    }
                }
            });
            this.breadcrumb = breadcrumb;
        }
        else {
            this.breadcrumb = [];
        }
    }
}
NgDynamicBreadcrumbComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'app-ng-dynamic-breadcrumb',
                template: "<ul class=\"custom-bread-crumb\" [ngStyle]=\"{'background-color': bgColor}\">\r\n  <span *ngFor=\"let item of breadcrumb; let i = index\">\r\n      <li [ngStyle]=\"{'font-size': fontSize}\">\r\n          <a *ngIf=\"item?.url\" [routerLink]=\"item?.url\" [ngStyle]=\"{'color': fontColor}\">{{ item.label }}</a>\r\n          <span *ngIf=\"!item?.url\" [ngStyle]=\"{'color': lastLinkColor}\">{{ item.label }}</span>\r\n          <span class=\"line\" *ngIf=\"breadcrumb.length !== i+1\">{{symbol}}</span>\r\n      </li>\r\n  </span>\r\n</ul>\r\n",
                styles: [".custom-bread-crumb{list-style:none;padding:10px 16px}.custom-bread-crumb li{display:inline}.custom-bread-crumb .line{padding-right:3px}.custom-bread-crumb li a{text-decoration:none}.custom-bread-crumb li a:hover{color:#01447e;text-decoration:underline}"]
            },] }
];
NgDynamicBreadcrumbComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: NgDynamicBreadcrumbService }
];
NgDynamicBreadcrumbComponent.propDecorators = {
    bgColor: [{ type: Input }],
    fontSize: [{ type: Input }],
    fontColor: [{ type: Input }],
    lastLinkColor: [{ type: Input }],
    symbol: [{ type: Input }]
};

class NgDynamicBreadcrumbModule {
}
NgDynamicBreadcrumbModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgDynamicBreadcrumbComponent],
                imports: [
                    RouterModule,
                    CommonModule
                ],
                exports: [NgDynamicBreadcrumbComponent]
            },] }
];

/*
 * Public API Surface of ng-dynamic-breadcrumb
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgDynamicBreadcrumbComponent, NgDynamicBreadcrumbModule, NgDynamicBreadcrumbService };
//# sourceMappingURL=ng-dynamic-breadcrumb.js.map
