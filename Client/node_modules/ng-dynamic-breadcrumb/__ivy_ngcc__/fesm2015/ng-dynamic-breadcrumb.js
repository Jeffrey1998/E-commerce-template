import { ɵɵdefineInjectable, Injectable, Component, Input, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NavigationEnd, PRIMARY_OUTLET, ActivatedRoute, Router, RouterModule } from '@angular/router';
import { filter, map } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from '@angular/common';

const _c0 = function (a0) { return { "color": a0 }; };
function NgDynamicBreadcrumbComponent_span_1_a_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("routerLink", item_r1 == null ? null : item_r1.url)("ngStyle", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx_r3.fontColor));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r1.label);
} }
function NgDynamicBreadcrumbComponent_span_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 2);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r4.lastLinkColor));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r1.label);
} }
function NgDynamicBreadcrumbComponent_span_1_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r5.symbol);
} }
const _c1 = function (a0) { return { "font-size": a0 }; };
function NgDynamicBreadcrumbComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "li", 2);
    ɵngcc0.ɵɵtemplate(2, NgDynamicBreadcrumbComponent_span_1_a_2_Template, 2, 5, "a", 3);
    ɵngcc0.ɵɵtemplate(3, NgDynamicBreadcrumbComponent_span_1_span_3_Template, 2, 4, "span", 4);
    ɵngcc0.ɵɵtemplate(4, NgDynamicBreadcrumbComponent_span_1_span_4_Template, 2, 1, "span", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(4, _c1, ctx_r0.fontSize));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r1 == null ? null : item_r1.url);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !(item_r1 == null ? null : item_r1.url));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.breadcrumb.length !== i_r2 + 1);
} }
const _c2 = function (a0) { return { "background-color": a0 }; };
class NgDynamicBreadcrumbService {
    constructor() {
        this.breadcrumbLabels = new BehaviorSubject([]);
        this.newBreadcrumb = new BehaviorSubject([]);
    }
    updateBreadcrumbLabels(labels) {
        this.breadcrumbLabels.next(labels);
    }
    updateBreadcrumb(newBreadcrumb) {
        this.newBreadcrumb.next(newBreadcrumb);
    }
}
NgDynamicBreadcrumbService.ɵfac = function NgDynamicBreadcrumbService_Factory(t) { return new (t || NgDynamicBreadcrumbService)(); };
NgDynamicBreadcrumbService.ɵprov = ɵɵdefineInjectable({ factory: function NgDynamicBreadcrumbService_Factory() { return new NgDynamicBreadcrumbService(); }, token: NgDynamicBreadcrumbService, providedIn: "root" });
NgDynamicBreadcrumbService.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgDynamicBreadcrumbService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

class NgDynamicBreadcrumbComponent {
    constructor(activatedRoute, router, ngDynamicBreadcrumbService) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.ngDynamicBreadcrumbService = ngDynamicBreadcrumbService;
        this.breadcrumb = [];
        this.bgColor = '#eee';
        this.fontSize = '18px';
        this.fontColor = '#0275d8';
        this.lastLinkColor = '#000';
        this.symbol = ' / ';
        this.breadCrumbData();
    }
    ngOnInit() {
        this.ngDynamicBreadcrumbService.breadcrumbLabels.subscribe((labelData) => {
            for (const label in labelData) {
                if (labelData.hasOwnProperty(label)) {
                    this.breadcrumb.map((crumb) => {
                        const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                        if (labelParams) {
                            for (const labelParam of labelParams) {
                                const dynamicData = labelData[label];
                                if (labelParam === label) {
                                    crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);
                                }
                            }
                        }
                    });
                }
            }
        });
        this.ngDynamicBreadcrumbService.newBreadcrumb.subscribe((breadcrumb) => {
            if (breadcrumb.length > 0) {
                this.updateData(this.activatedRoute, breadcrumb);
            }
        });
    }
    breadCrumbData() {
        this.router.events
            .pipe(filter(event => event instanceof NavigationEnd))
            .pipe(map(() => this.activatedRoute))
            .pipe(map((route) => {
            while (route.firstChild) {
                route = route.firstChild;
            }
            return route;
        }))
            .pipe(filter(route => route.outlet === PRIMARY_OUTLET))
            .subscribe(route => {
            this.params = route.snapshot.params;
            this.updateData(route, null);
        });
    }
    updateData(route, newBreadcrumb) {
        if (route.snapshot.data.breadcrumb || newBreadcrumb) {
            const data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;
            const breadcrumb = (JSON.parse(JSON.stringify(data)));
            breadcrumb.map((crumb) => {
                const urlChunks = crumb.url.split('/');
                for (const chunk of urlChunks) {
                    if (chunk.includes(':')) {
                        const paramID = chunk.replace(':', '');
                        // const routerParamID = route.snapshot.params[paramID];
                        const routerParamID = this.params[paramID];
                        crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);
                    }
                }
                const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                if (labelParams) {
                    for (const labelParam of labelParams) {
                        // const routerParamID = route.snapshot.params[labelParam.trim()];
                        const routerParamID = this.params[labelParam.trim()];
                        if (routerParamID) {
                            crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);
                        }
                        else {
                            // crumb.label = crumb.label.replace('{{' + labelParam + '}}', '');
                        }
                    }
                }
            });
            this.breadcrumb = breadcrumb;
        }
        else {
            this.breadcrumb = [];
        }
    }
}
NgDynamicBreadcrumbComponent.ɵfac = function NgDynamicBreadcrumbComponent_Factory(t) { return new (t || NgDynamicBreadcrumbComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router), ɵngcc0.ɵɵdirectiveInject(NgDynamicBreadcrumbService)); };
NgDynamicBreadcrumbComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgDynamicBreadcrumbComponent, selectors: [["app-ng-dynamic-breadcrumb"]], inputs: { bgColor: "bgColor", fontSize: "fontSize", fontColor: "fontColor", lastLinkColor: "lastLinkColor", symbol: "symbol" }, decls: 2, vars: 4, consts: [[1, "custom-bread-crumb", 3, "ngStyle"], [4, "ngFor", "ngForOf"], [3, "ngStyle"], [3, "routerLink", "ngStyle", 4, "ngIf"], [3, "ngStyle", 4, "ngIf"], ["class", "line", 4, "ngIf"], [3, "routerLink", "ngStyle"], [1, "line"]], template: function NgDynamicBreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ul", 0);
        ɵngcc0.ɵɵtemplate(1, NgDynamicBreadcrumbComponent_span_1_Template, 5, 6, "span", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(2, _c2, ctx.bgColor));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.breadcrumb);
    } }, directives: [ɵngcc2.NgStyle, ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc1.RouterLinkWithHref], styles: [".custom-bread-crumb[_ngcontent-%COMP%]{list-style:none;padding:10px 16px}.custom-bread-crumb[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{display:inline}.custom-bread-crumb[_ngcontent-%COMP%]   .line[_ngcontent-%COMP%]{padding-right:3px}.custom-bread-crumb[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}.custom-bread-crumb[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{color:#01447e;text-decoration:underline}"] });
NgDynamicBreadcrumbComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: NgDynamicBreadcrumbService }
];
NgDynamicBreadcrumbComponent.propDecorators = {
    bgColor: [{ type: Input }],
    fontSize: [{ type: Input }],
    fontColor: [{ type: Input }],
    lastLinkColor: [{ type: Input }],
    symbol: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgDynamicBreadcrumbComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line: component-selector
                selector: 'app-ng-dynamic-breadcrumb',
                template: "<ul class=\"custom-bread-crumb\" [ngStyle]=\"{'background-color': bgColor}\">\r\n  <span *ngFor=\"let item of breadcrumb; let i = index\">\r\n      <li [ngStyle]=\"{'font-size': fontSize}\">\r\n          <a *ngIf=\"item?.url\" [routerLink]=\"item?.url\" [ngStyle]=\"{'color': fontColor}\">{{ item.label }}</a>\r\n          <span *ngIf=\"!item?.url\" [ngStyle]=\"{'color': lastLinkColor}\">{{ item.label }}</span>\r\n          <span class=\"line\" *ngIf=\"breadcrumb.length !== i+1\">{{symbol}}</span>\r\n      </li>\r\n  </span>\r\n</ul>\r\n",
                styles: [".custom-bread-crumb{list-style:none;padding:10px 16px}.custom-bread-crumb li{display:inline}.custom-bread-crumb .line{padding-right:3px}.custom-bread-crumb li a{text-decoration:none}.custom-bread-crumb li a:hover{color:#01447e;text-decoration:underline}"]
            }]
    }], function () { return [{ type: ɵngcc1.ActivatedRoute }, { type: ɵngcc1.Router }, { type: NgDynamicBreadcrumbService }]; }, { bgColor: [{
            type: Input
        }], fontSize: [{
            type: Input
        }], fontColor: [{
            type: Input
        }], lastLinkColor: [{
            type: Input
        }], symbol: [{
            type: Input
        }] }); })();

class NgDynamicBreadcrumbModule {
}
NgDynamicBreadcrumbModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgDynamicBreadcrumbModule });
NgDynamicBreadcrumbModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgDynamicBreadcrumbModule_Factory(t) { return new (t || NgDynamicBreadcrumbModule)(); }, imports: [[
            RouterModule,
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgDynamicBreadcrumbModule, { declarations: function () { return [NgDynamicBreadcrumbComponent]; }, imports: function () { return [RouterModule,
        CommonModule]; }, exports: function () { return [NgDynamicBreadcrumbComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgDynamicBreadcrumbModule, [{
        type: NgModule,
        args: [{
                declarations: [NgDynamicBreadcrumbComponent],
                imports: [
                    RouterModule,
                    CommonModule
                ],
                exports: [NgDynamicBreadcrumbComponent]
            }]
    }], null, null); })();

/*
 * Public API Surface of ng-dynamic-breadcrumb
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgDynamicBreadcrumbComponent, NgDynamicBreadcrumbModule, NgDynamicBreadcrumbService };

//# sourceMappingURL=ng-dynamic-breadcrumb.js.map